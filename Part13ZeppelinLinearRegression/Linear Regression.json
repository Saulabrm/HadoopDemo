{"paragraphs":[{"text":"%pyspark\nfrom pyspark.mllib.classification import SVMWithSGD, SVMModel\nfrom pyspark.mllib.regression import LabeledPoint\nfrom pyspark.mllib.feature import StandardScaler\n\n# Clear the data\ndata = sc.textFile(\"/tmp/Oleksii.Yermolenko/ex1data1.txt\").map(lambda row: row.split(','))\nfullSet = data.map(lambda line: (float(line[0]), float(line[1]))).collect()","dateUpdated":"2017-07-13T13:18:05-0400","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","title":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1497973244444_549273818","id":"20170620-114044_643257264","result":{"code":"SUCCESS","type":"TEXT","msg":""},"dateCreated":"2017-06-20T11:40:44-0400","dateStarted":"2017-07-13T13:16:50-0400","dateFinished":"2017-07-13T13:16:51-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:467","title":"Load the data","focus":true},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"title":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1499696792773_-1656319304","id":"20170710-102632_1767981307","dateCreated":"2017-07-10T10:26:32-0400","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:979","text":"%pyspark\ntotalDataVisual =[]\ntrainingDataVisual = []\ntestingDataVisual = []\npredictedDataVisual = []\nz.z.angularBind(\"totalData\", totalDataVisual)\nz.z.angularBind(\"trainingData\", trainingDataVisual)\nz.z.angularBind(\"testingData\", testingDataVisual)\nz.z.angularBind(\"predictedData\", predictedDataVisual)\n\nfor i in dataFull:\n    totalDataVisual.append(i)\n    z.z.angularBind(\"totalData\", totalDataVisual)\n    time.sleep(0.1)","dateUpdated":"2017-07-13T13:18:19-0400","dateFinished":"2017-07-13T13:18:33-0400","dateStarted":"2017-07-13T13:18:19-0400","title":"Push all data into variable","result":{"code":"SUCCESS","type":"TEXT","msg":""}},{"text":"%pyspark\nfrom pyspark.mllib.regression import LinearRegressionWithSGD\n\n# Load and parse the data\ndef parsePoint(line):\n    values = [float(x) for x in line.split(',')]\n    return LabeledPoint(values[0], values[1:])\n\ntotalDataVisual =[]\ntrainingDataVisual = []\ntestingDataVisual = []\npredictedDataVisual = []\nz.z.angularBind(\"totalData\", totalDataVisual)\nz.z.angularBind(\"trainingData\", trainingDataVisual)\nz.z.angularBind(\"testingData\", testingDataVisual)\nz.z.angularBind(\"predictedData\", predictedDataVisual)\n\ndataFullInverse = data.map(lambda line: LabeledPoint(float(line[1]),map(float, line[0:1])))\n\ntrainingData, testingData = dataFullInverse.randomSplit([.7,.3],seed=1234)\n\nz.z.angularBind(\"trainingData\", trainingData.map(lambda line: (line.features[0],line.label)).collect())\n\nlinearModel = LinearRegressionWithSGD.train(trainingData, 200,.2)\n\nz.z.angularBind(\"testingData\", testingDataVisual)\nz.z.angularBind(\"predictedData\", predictedDataVisual)\n\nfor i in testingData.map(lambda line: (line.features[0],line.label)).collect():\n    params = []\n    params.append(i[0])\n    result = linearModel.predict(params)\n    predictedDataVisual.append((result, i[1]))\n    testingDataVisual.append((i[0], i[1]))\n    z.z.angularBind(\"predictedData\", testingDataVisual)\n    z.z.angularBind(\"testingData\", predictedDataVisual)\n    time.sleep(1)\n","dateUpdated":"2017-07-13T13:24:33-0400","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/python","tableHide":false,"editorHide":false,"title":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1499699860772_-1136606968","id":"20170710-111740_391299502","result":{"code":"SUCCESS","type":"TEXT","msg":""},"dateCreated":"2017-07-10T11:17:40-0400","dateStarted":"2017-07-13T13:24:33-0400","dateFinished":"2017-07-13T13:25:04-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:468","title":"Perform prediction using Linear Regression","focus":true},{"text":"%angular\n<style>\n.chart {\n\n}\n\n.main text {\n    font: 10px sans-serif;\t\n}\n\n.axis line, .axis path {\n    shape-rendering: crispEdges;\n    stroke: black;\n    fill: none;\n}\n\n</style>\n\n<div id=\"container\" vars=\"totalData,testingData,trainingData,predictedData\" style='margin:100px'>\n    <svg class=\"chart\"></svg>\n</div>\n\n {{data}}\n\n<script>\n\nfunction host(element){\n       \n    var varNames = element.attr('vars').split(',');\n    \n    window.angularVars = {};\n  \n    var scope = angular.element(element.parent('.ng-scope')).scope().compiledScope;\n   \n    $.each(varNames, function(i, v){\n        window[v+'-watcher'] = scope.$watch(v, function(newVal, oldVal){\n            window.angularVars[v] = newVal;\n            drawTrainData();\n            \n        });\n    });\n}\n\nfunction drawTrainData() {\n   \n    var totalData = window.angularVars.totalData;\n    var trainingData = window.angularVars.trainingData;\n    var testingData = window.angularVars.testingData;\n    var predictedData = window.angularVars.predictedData;\n    var total = totalData.concat(trainingData).concat(testingData).concat(predictedData);\n\n    var margin = {top: 20, right: 25, bottom: 20, left: 25}\n      , width = 960 - margin.left - margin.right\n      , height = 500 - margin.top - margin.bottom;\n    \n    var x = d3.scale.linear()\n              .domain([0, d3.max(total, function(d) { return d[0]; })])\n              .range([ 0, width ]);\n    \n    var y = d3.scale.linear()\n    \t      .domain([0, d3.max(total, function(d) { return d[1]; })])\n    \t      .range([ height, 0 ]);\n    \t      \n    d3.selectAll(\"svg > *\").remove();\n \n    var chart = d3.select('.chart')\n\t.attr('width', width + margin.right + margin.left)\n\t.attr('height', height + margin.top + margin.bottom)\n\t.attr('class', 'chart')\n\n    var main = chart.append('g')\n\t.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')')\n\t.attr('width', width)\n\t.attr('height', height)\n\t.attr('class', 'main')   \n        \n    // draw the x axis\n    var xAxis = d3.svg.axis()\n\t.scale(x)\n\t.orient('bottom');\n\n    main.append('g')\n\t.attr('transform', 'translate(0,' + height + ')')\n\t.attr('class', 'main axis date')\n\t.call(xAxis);\n\n    // draw the y axis\n    var yAxis = d3.svg.axis()\n\t.scale(y)\n\t.orient('left');\n\n    main.append('g')\n\t.attr('transform', 'translate(0,0)')\n\t.attr('class', 'main axis date')\n\t.call(yAxis);\n\n    var g = main.append(\"svg:g\"); \n    \n    g.selectAll(\"scatter-dots\")\n      .data(totalData)\n      .enter().append(\"svg:circle\")\n          .attr(\"cx\", function (d,i) { return x(d[0]); } )\n          .attr(\"cy\", function (d) { return y(d[1]); } )\n          .attr(\"r\", 3)\n          .attr(\"fill\", \"blue\");\n    \n    \n    g.selectAll(\"scatter-dots\")\n      .data(testingData)\n      .enter().append(\"svg:circle\")\n          .attr(\"cx\", function (d,i) { return x(d[0]); } )\n          .attr(\"cy\", function (d) { return y(d[1]); } )\n          .attr(\"r\", 3)\n          .attr(\"fill\", \"red\");\n    \n    g.selectAll(\"scatter-dots\")\n      .data(trainingData)\n      .enter().append(\"svg:circle\")\n          .attr(\"cx\", function (d,i) { return x(d[0]); } )\n          .attr(\"cy\", function (d) { return y(d[1]); } )\n          .attr(\"r\", 3)\n          .attr(\"fill\", \"blue\");\n    \n    g.selectAll(\"scatter-dots\")\n      .data(predictedData)\n      .enter().append(\"svg:circle\")\n          .attr(\"cx\", function (d,i) { return x(d[0]); } )\n          .attr(\"cy\", function (d) { return y(d[1]); } )\n          .attr(\"r\", 3)\n          .attr(\"fill\", \"green\");\n  \n}\n\nif (window.d3) {\n    host($('#container'));\n} else {\n    var sc = document.createElement('script');\n    sc.type = 'text/javascript';\n    sc.src = 'https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.16/d3.min.js';\n    sc.onload = function() { host($('#container')); }\n    document.getElementsByTagName('head')[0].appendChild(sc);\n}\n</script>","dateUpdated":"2017-07-13T13:12:09-0400","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","tableHide":false,"editorHide":false},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1498659066035_-475044204","id":"20170628-101106_1079913897","result":{"code":"SUCCESS","type":"ANGULAR","msg":"<style>\n.chart {\n\n}\n\n.main text {\n    font: 10px sans-serif;\t\n}\n\n.axis line, .axis path {\n    shape-rendering: crispEdges;\n    stroke: black;\n    fill: none;\n}\n\n</style>\n\n<div id=\"container\" vars=\"totalData,testingData,trainingData,predictedData\" style='margin:100px'>\n    <svg class=\"chart\"></svg>\n</div>\n\n {{data}}\n\n<script>\n\nfunction host(element){\n       \n    var varNames = element.attr('vars').split(',');\n    \n    window.angularVars = {};\n  \n    var scope = angular.element(element.parent('.ng-scope')).scope().compiledScope;\n   \n    $.each(varNames, function(i, v){\n        window[v+'-watcher'] = scope.$watch(v, function(newVal, oldVal){\n            window.angularVars[v] = newVal;\n            drawTrainData();\n            \n        });\n    });\n}\n\nfunction drawTrainData() {\n   \n    var totalData = window.angularVars.totalData;\n    var trainingData = window.angularVars.trainingData;\n    var testingData = window.angularVars.testingData;\n    var predictedData = window.angularVars.predictedData;\n    var total = totalData.concat(trainingData).concat(testingData).concat(predictedData);\n\n    var margin = {top: 20, right: 25, bottom: 20, left: 25}\n      , width = 960 - margin.left - margin.right\n      , height = 500 - margin.top - margin.bottom;\n    \n    var x = d3.scale.linear()\n              .domain([0, d3.max(total, function(d) { return d[0]; })])\n              .range([ 0, width ]);\n    \n    var y = d3.scale.linear()\n    \t      .domain([0, d3.max(total, function(d) { return d[1]; })])\n    \t      .range([ height, 0 ]);\n    \t      \n    d3.selectAll(\"svg > *\").remove();\n \n    var chart = d3.select('.chart')\n\t.attr('width', width + margin.right + margin.left)\n\t.attr('height', height + margin.top + margin.bottom)\n\t.attr('class', 'chart')\n\n    var main = chart.append('g')\n\t.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')')\n\t.attr('width', width)\n\t.attr('height', height)\n\t.attr('class', 'main')   \n        \n    // draw the x axis\n    var xAxis = d3.svg.axis()\n\t.scale(x)\n\t.orient('bottom');\n\n    main.append('g')\n\t.attr('transform', 'translate(0,' + height + ')')\n\t.attr('class', 'main axis date')\n\t.call(xAxis);\n\n    // draw the y axis\n    var yAxis = d3.svg.axis()\n\t.scale(y)\n\t.orient('left');\n\n    main.append('g')\n\t.attr('transform', 'translate(0,0)')\n\t.attr('class', 'main axis date')\n\t.call(yAxis);\n\n    var g = main.append(\"svg:g\"); \n    \n    g.selectAll(\"scatter-dots\")\n      .data(totalData)\n      .enter().append(\"svg:circle\")\n          .attr(\"cx\", function (d,i) { return x(d[0]); } )\n          .attr(\"cy\", function (d) { return y(d[1]); } )\n          .attr(\"r\", 3)\n          .attr(\"fill\", \"blue\");\n    \n    \n    g.selectAll(\"scatter-dots\")\n      .data(testingData)\n      .enter().append(\"svg:circle\")\n          .attr(\"cx\", function (d,i) { return x(d[0]); } )\n          .attr(\"cy\", function (d) { return y(d[1]); } )\n          .attr(\"r\", 3)\n          .attr(\"fill\", \"red\");\n    \n    g.selectAll(\"scatter-dots\")\n      .data(trainingData)\n      .enter().append(\"svg:circle\")\n          .attr(\"cx\", function (d,i) { return x(d[0]); } )\n          .attr(\"cy\", function (d) { return y(d[1]); } )\n          .attr(\"r\", 3)\n          .attr(\"fill\", \"blue\");\n    \n    g.selectAll(\"scatter-dots\")\n      .data(predictedData)\n      .enter().append(\"svg:circle\")\n          .attr(\"cx\", function (d,i) { return x(d[0]); } )\n          .attr(\"cy\", function (d) { return y(d[1]); } )\n          .attr(\"r\", 3)\n          .attr(\"fill\", \"green\");\n  \n}\n\nif (window.d3) {\n    host($('#container'));\n} else {\n    var sc = document.createElement('script');\n    sc.type = 'text/javascript';\n    sc.src = 'https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.16/d3.min.js';\n    sc.onload = function() { host($('#container')); }\n    document.getElementsByTagName('head')[0].appendChild(sc);\n}\n</script>"},"dateCreated":"2017-06-28T10:11:06-0400","dateStarted":"2017-07-13T13:12:09-0400","dateFinished":"2017-07-13T13:12:09-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:469","focus":true},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1499695931462_421143632","id":"20170710-101211_715328096","dateCreated":"2017-07-10T10:12:11-0400","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:471"},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1499446931402_-103849898","id":"20170707-130211_1035497333","dateCreated":"2017-07-07T13:02:11-0400","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:472"}],"name":"Linear Regression","id":"2CM94QNWG","angularObjects":{"2CD4K7ZEG:shared_process":[],"2CESZ881M:shared_process":[],"2CFJ1EZ3K:shared_process":[{"name":"name","object":"Apache Zeppelin","noteId":"2CM94QNWG"},{"name":"originaldata","object":[[6.1101,17.592],[5.5277,9.1302],[8.5186,13.662],[7.0032,11.854],[5.8598,6.8233]],"noteId":"2CM94QNWG"},{"name":"data","object":[[6.1101,17.592],[5.5277,9.1302],[8.5186,13.662],[7.0032,11.854],[5.8598,6.8233]],"noteId":"2CM94QNWG"},{"name":"zname","object":[6.1101,5.5277,8.5186,7.0032,5.8598,8.3829,7.4764,8.5781,6.4862,5.0546,5.7107,14.164,5.734,8.4084,5.6407,5.3794,6.3654,5.1301,6.4296,7.0708,6.1891,20.27,5.4901,6.3261,5.5649,18.945,12.828,10.957,13.176,22.203,5.2524,6.5894,9.2482,5.8918,8.2111,7.9334,8.0959,5.6063,12.836,6.3534,5.4069,6.8825,11.708,5.7737,7.8247,7.0931,5.0702,5.8014,11.7,5.5416,7.5402,5.3077,7.4239,7.6031,6.3328,6.3589,6.2742,5.6397,9.3102,9.4536,8.8254,5.1793,21.279,14.908,18.959,7.2182,8.2951,10.236,5.4994,20.341,10.136,7.3345,6.0062,7.2259,5.0269,6.5479,7.5386,5.0365,10.274,5.1077,5.7292,5.1884,6.3557,9.7687,6.5159,8.5172,9.1802,6.002,5.5204,5.0594,5.7077,7.6366,5.8707,5.3054,8.2934,13.394,5.4369],"noteId":"2CM94QNWG"}],"2CETMTVSC:shared_process":[],"2CD1PJTKS:shared_process":[],"2CF4D6MC8:shared_process":[]},"config":{"looknfeel":"default"},"info":{}}