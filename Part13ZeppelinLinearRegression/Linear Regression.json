{"paragraphs":[{"title":"Load the data","text":"%pyspark\n\ndata = sc.textFile(\"/data.txt\").map(lambda row: row.split(','))\nfullSet = data.map(lambda line: (float(line[0]), float(line[1]))).collect()","dateUpdated":"2017-07-16T13:33:31+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","title":true,"results":[],"enabled":true,"editorSetting":{"language":"python"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1500209252614_-351354791","id":"20170620-114044_643257264","dateCreated":"2017-07-16T12:47:32+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:144","user":"anonymous","dateFinished":"2017-07-16T13:02:04+0000","dateStarted":"2017-07-16T13:02:00+0000"},{"title":"Push all data into variable","text":"%pyspark\nimport time\n\ndef ClearAll():\n    global totalDataVisual\n    global trainingDataVisual\n    global testingDataVisual\n    global predictedDataVisual\n    totalDataVisual =[]\n    trainingDataVisual = []\n    testingDataVisual = []\n    predictedDataVisual = []\n    z.z.angularBind(\"totalData\", totalDataVisual)\n    z.z.angularBind(\"trainingData\", trainingDataVisual)\n    z.z.angularBind(\"testingData\", testingDataVisual)\n    z.z.angularBind(\"predictedData\", predictedDataVisual)\n\nClearAll()\nfor i in fullSet:\n    totalDataVisual.append(i)\n    z.z.angularBind(\"totalData\", totalDataVisual)\n    time.sleep(0.05)","dateUpdated":"2017-07-16T13:36:06+0000","config":{"colWidth":12,"title":true,"results":[],"enabled":true,"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1500209252665_-360204016","id":"20170710-102632_1767981307","dateCreated":"2017-07-16T12:47:32+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:145","user":"anonymous","dateFinished":"2017-07-16T13:37:23+0000","dateStarted":"2017-07-16T13:36:06+0000"},{"title":"Perform prediction using Linear Regression","text":"%pyspark\nfrom pyspark.mllib.regression import LinearRegressionWithSGD\nfrom pyspark.mllib.classification import SVMWithSGD, SVMModel\nfrom pyspark.mllib.regression import LabeledPoint\nfrom pyspark.mllib.feature import StandardScaler\n\n# Load and parse the data\ndef parsePoint(line):\n    values = [float(x) for x in line.split(',')]\n    return LabeledPoint(values[0], values[1:])\n\nClearAll()\n\ndataFullInverse = data.map(lambda line: LabeledPoint(float(line[1]),map(float, line[0:1])))\n\ntrainingData, testingData = dataFullInverse.randomSplit([.7,.3],seed=1234)\n\nz.z.angularBind(\"trainingData\", trainingData.map(lambda line: (line.features[0],line.label)).collect())\n\nlinearModel = LinearRegressionWithSGD.train(trainingData, 200,.2)\n\nz.z.angularBind(\"testingData\", testingDataVisual)\nz.z.angularBind(\"predictedData\", predictedDataVisual)\n\nfor i in testingData.map(lambda line: (line.features[0],line.label)).collect():\n    params = []\n    params.append(i[0])\n    result = linearModel.predict(params)\n    predictedDataVisual.append((result, i[1]))\n    testingDataVisual.append((i[0], i[1]))\n    z.z.angularBind(\"predictedData\", testingDataVisual)\n    z.z.angularBind(\"testingData\", predictedDataVisual)\n    time.sleep(1)\n","dateUpdated":"2017-07-16T13:31:03+0000","config":{"tableHide":false,"colWidth":12,"editorMode":"ace/mode/python","editorHide":false,"title":true,"results":[],"enabled":true,"editorSetting":{"language":"python"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1500209252672_-375209223","id":"20170710-111740_391299502","dateCreated":"2017-07-16T12:47:32+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:146","user":"anonymous","dateFinished":"2017-07-16T13:32:34+0000","dateStarted":"2017-07-16T13:31:03+0000"},{"text":"%angular\n<style>\n.chart {\n\n}\n\n.main text {\n    font: 10px sans-serif;\t\n}\n\n.axis line, .axis path {\n    shape-rendering: crispEdges;\n    stroke: black;\n    fill: none;\n}\n\n</style>\n\n<div id=\"container\" vars=\"totalData,testingData,trainingData,predictedData\" style='margin:100px'>\n    <svg class=\"chart\"></svg>\n</div>\n\n {{data}}\n\n<script>\n\nfunction host(element){\n       \n    var varNames = element.attr('vars').split(',');\n    \n    window.angularVars = {};\n  \n    var scope = angular.element(element.parent('.ng-scope')).scope().compiledScope;\n   \n    $.each(varNames, function(i, v){\n        window[v+'-watcher'] = scope.$watch(v, function(newVal, oldVal){\n            window.angularVars[v] = newVal;\n            drawData();\n        });\n    });\n}\n\nfunction drawData() {\n    var totalData = window.angularVars.totalData;\n    var trainingData = window.angularVars.trainingData;\n    var testingData = window.angularVars.testingData;\n    var predictedData = window.angularVars.predictedData;\n    var total = totalData.concat(trainingData).concat(testingData).concat(predictedData);\n\n    var margin = {top: 20, right: 25, bottom: 20, left: 25}\n      , width = 960 - margin.left - margin.right\n      , height = 500 - margin.top - margin.bottom;\n    \n    var x = d3.scale.linear()\n              .domain([0, d3.max(total, function(d) { return d[0]; })])\n              .range([ 0, width ]);\n    \n    var y = d3.scale.linear()\n    \t      .domain([0, d3.max(total, function(d) { return d[1]; })])\n    \t      .range([ height, 0 ]);\n    \t      \n    d3.selectAll(\"svg > *\").remove();\n \n    var chart = d3.select('.chart')\n\t.attr('width', width + margin.right + margin.left)\n\t.attr('height', height + margin.top + margin.bottom)\n\t.attr('class', 'chart')\n\n    var main = chart.append('g')\n\t.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')')\n\t.attr('width', width)\n\t.attr('height', height)\n\t.attr('class', 'main')   \n        \n    // draw the x axis\n    var xAxis = d3.svg.axis().scale(x).orient('bottom');\n\n    main.append('g')\n\t.attr('transform', 'translate(0,' + height + ')')\n\t.attr('class', 'main axis date')\n\t.call(xAxis);\n\n    // draw the y axis\n    var yAxis = d3.svg.axis().scale(y).orient('left');\n\n    main.append('g')\n\t.attr('transform', 'translate(0,0)')\n\t.attr('class', 'main axis date')\n\t.call(yAxis);\n\n    var g = main.append(\"svg:g\"); \n    \n    g.selectAll(\"scatter-dots\")\n      .data(totalData)\n      .enter().append(\"svg:circle\")\n          .attr(\"cx\", function (d,i) { return x(d[0]); } )\n          .attr(\"cy\", function (d) { return y(d[1]); } )\n          .attr(\"r\", 3)\n          .attr(\"fill\", \"blue\");\n    \n    g.selectAll(\"scatter-dots\")\n      .data(testingData)\n      .enter().append(\"svg:circle\")\n          .attr(\"cx\", function (d,i) { return x(d[0]); } )\n          .attr(\"cy\", function (d) { return y(d[1]); } )\n          .attr(\"r\", 3)\n          .attr(\"fill\", \"red\");\n    \n    g.selectAll(\"scatter-dots\")\n      .data(trainingData)\n      .enter().append(\"svg:circle\")\n          .attr(\"cx\", function (d,i) { return x(d[0]); } )\n          .attr(\"cy\", function (d) { return y(d[1]); } )\n          .attr(\"r\", 3)\n          .attr(\"fill\", \"blue\");\n    \n    g.selectAll(\"scatter-dots\")\n      .data(predictedData)\n      .enter().append(\"svg:circle\")\n          .attr(\"cx\", function (d,i) { return x(d[0]); } )\n          .attr(\"cy\", function (d) { return y(d[1]); } )\n          .attr(\"r\", 3)\n          .attr(\"fill\", \"green\");\n  \n}\n\nif (window.d3) {\n    host($('#container'));\n} else {\n    var sc = document.createElement('script');\n    sc.type = 'text/javascript';\n    sc.src = 'https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.16/d3.min.js';\n    sc.onload = function() { host($('#container')); }\n    document.getElementsByTagName('head')[0].appendChild(sc);\n}\n</script>","dateUpdated":"2017-07-16T13:37:59+0000","config":{"tableHide":false,"colWidth":12,"editorMode":"ace/mode/undefined","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"editorSetting":{"editOnDblClick":true},"title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"ANGULAR","data":"<style>\n.chart {\n\n}\n\n.main text {\n    font: 10px sans-serif;\t\n}\n\n.axis line, .axis path {\n    shape-rendering: crispEdges;\n    stroke: black;\n    fill: none;\n}\n\n</style>\n\n<div id=\"container\" vars=\"totalData,testingData,trainingData,predictedData\" style='margin:100px'>\n    <svg class=\"chart\"></svg>\n</div>\n\n {{data}}\n\n<script>\n\nfunction host(element){\n       \n    var varNames = element.attr('vars').split(',');\n    \n    window.angularVars = {};\n  \n    var scope = angular.element(element.parent('.ng-scope')).scope().compiledScope;\n   \n    $.each(varNames, function(i, v){\n        window[v+'-watcher'] = scope.$watch(v, function(newVal, oldVal){\n            window.angularVars[v] = newVal;\n            drawData();\n        });\n    });\n}\n\nfunction drawData() {\n    var totalData = window.angularVars.totalData;\n    var trainingData = window.angularVars.trainingData;\n    var testingData = window.angularVars.testingData;\n    var predictedData = window.angularVars.predictedData;\n    var total = totalData.concat(trainingData).concat(testingData).concat(predictedData);\n\n    var margin = {top: 20, right: 25, bottom: 20, left: 25}\n      , width = 960 - margin.left - margin.right\n      , height = 500 - margin.top - margin.bottom;\n    \n    var x = d3.scale.linear()\n              .domain([0, d3.max(total, function(d) { return d[0]; })])\n              .range([ 0, width ]);\n    \n    var y = d3.scale.linear()\n    \t      .domain([0, d3.max(total, function(d) { return d[1]; })])\n    \t      .range([ height, 0 ]);\n    \t      \n    d3.selectAll(\"svg > *\").remove();\n \n    var chart = d3.select('.chart')\n\t.attr('width', width + margin.right + margin.left)\n\t.attr('height', height + margin.top + margin.bottom)\n\t.attr('class', 'chart')\n\n    var main = chart.append('g')\n\t.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')')\n\t.attr('width', width)\n\t.attr('height', height)\n\t.attr('class', 'main')   \n        \n    // draw the x axis\n    var xAxis = d3.svg.axis().scale(x).orient('bottom');\n\n    main.append('g')\n\t.attr('transform', 'translate(0,' + height + ')')\n\t.attr('class', 'main axis date')\n\t.call(xAxis);\n\n    // draw the y axis\n    var yAxis = d3.svg.axis().scale(y).orient('left');\n\n    main.append('g')\n\t.attr('transform', 'translate(0,0)')\n\t.attr('class', 'main axis date')\n\t.call(yAxis);\n\n    var g = main.append(\"svg:g\"); \n    \n    g.selectAll(\"scatter-dots\")\n      .data(totalData)\n      .enter().append(\"svg:circle\")\n          .attr(\"cx\", function (d,i) { return x(d[0]); } )\n          .attr(\"cy\", function (d) { return y(d[1]); } )\n          .attr(\"r\", 3)\n          .attr(\"fill\", \"blue\");\n    \n    g.selectAll(\"scatter-dots\")\n      .data(testingData)\n      .enter().append(\"svg:circle\")\n          .attr(\"cx\", function (d,i) { return x(d[0]); } )\n          .attr(\"cy\", function (d) { return y(d[1]); } )\n          .attr(\"r\", 3)\n          .attr(\"fill\", \"red\");\n    \n    g.selectAll(\"scatter-dots\")\n      .data(trainingData)\n      .enter().append(\"svg:circle\")\n          .attr(\"cx\", function (d,i) { return x(d[0]); } )\n          .attr(\"cy\", function (d) { return y(d[1]); } )\n          .attr(\"r\", 3)\n          .attr(\"fill\", \"blue\");\n    \n    g.selectAll(\"scatter-dots\")\n      .data(predictedData)\n      .enter().append(\"svg:circle\")\n          .attr(\"cx\", function (d,i) { return x(d[0]); } )\n          .attr(\"cy\", function (d) { return y(d[1]); } )\n          .attr(\"r\", 3)\n          .attr(\"fill\", \"green\");\n  \n}\n\nif (window.d3) {\n    host($('#container'));\n} else {\n    var sc = document.createElement('script');\n    sc.type = 'text/javascript';\n    sc.src = 'https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.16/d3.min.js';\n    sc.onload = function() { host($('#container')); }\n    document.getElementsByTagName('head')[0].appendChild(sc);\n}\n</script>"}]},"apps":[],"jobName":"paragraph_1500209252675_-374824474","id":"20170628-101106_1079913897","dateCreated":"2017-07-16T12:47:32+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:147","user":"anonymous","dateFinished":"2017-07-16T13:27:54+0000","dateStarted":"2017-07-16T13:27:54+0000","title":"Visualize output"},{"dateUpdated":"2017-07-16T12:47:32+0000","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1500209252799_-311725654","id":"20170707-130211_1035497333","dateCreated":"2017-07-16T12:47:32+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:149"}],"name":"Linear Regression","id":"2CR5A31RK","angularObjects":{"2CEW5GBT8:shared_process":[],"2C8A4SZ9T_livy2:shared_process":[],"2CGSU7XSZ:shared_process":[],"2CJCXYWM2:shared_process":[],"2CGGK94TT:shared_process":[],"2CFK35D2R:shared_process":[],"2C4U48MY3_spark2:shared_process":[],"2CFNPFVQG:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}